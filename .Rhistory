geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using confidence interval")
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard deviation")
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard error")
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue") +
geom_jitter( size=0.9, color="grey")
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue") +
geom_jitter( size=0.9, color="grey", width=0.3)
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue") +
geom_jitter( size=0.9, color="grey", width=0.1)
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue") +
geom_jitter( size=0.9, color="orange", width=0.1)
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue", notch=TRUE) +
geom_jitter( size=0.9, color="orange", width=0.1)
# Library
library(tidyverse)
# --- What is an error bar???
#They give a general idea of how precise a measurement is, or conversely, how far from the reported value the true (error free) value might be.
# --- Geom_errorbar.
data <- data.frame(
name=letters[1:5],
value=sample(seq(4,15),5),
sd=c(1,0.2,3,2,4)
)
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.6)
dev.off()
# --- Geom_errorbar.
data <- data.frame(
name=letters[1:5],
value=sample(seq(4,15),5),
sd=c(1,0.2,3,2,4)
)
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.9)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=4.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
dev.off()
# --- Geom_errorbar.
data <- data.frame(
name=letters[1:5],
value=sample(seq(4,15),5),
sd=c(1,0.2,3,2,4)
)
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_1.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_2.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_crossbar( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_3.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_linerange( aes(x=name, ymin=value-sd, ymax=value+sd), colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_4.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_pointrange( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_5.png", width=480, height=480)
ggplot(data) +
geom_errorbarh( aes(y=name, xmin=value-sd, xmax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_6.png", width=480, height=480)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3) +
coord_flip()
dev.off()
# Data
data <- iris %>% select(Species, Sepal.Length)
# Calculates
my_sum <- data %>%
group_by(Species) %>%
summarise(
n=n(),
mean=mean(Sepal.Length),
sd=sd(Sepal.Length)
) %>%
mutate( se=sd/sqrt(n))  %>%
mutate( ic=se * qt((1-0.05)/2 + .5, n-1))
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_7.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard deviation")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_8.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard error")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_9.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using confidence interval")
dev.off()
# ---- Better to use a boxplot if you have underlying data
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_10.png", width=480, height=480)
data %>%
ggplot( aes(x=Species, y=Sepal.Length)) +
geom_boxplot( fill="skyblue", notch=TRUE) +
geom_jitter( size=0.9, color="orange", width=0.1)
dev.off()
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="green", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard deviation")
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=0.6) +
ggtitle("using standard deviation")
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_7.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=0.9) +
ggtitle("using standard deviation")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_7.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using standard deviation")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_7.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using standard deviation")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_8.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using standard error")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#4_Add_error_bar_9.png", width=480, height=480)
ggplot(my_sum) +
geom_bar( aes(x=Species, y=mean), stat="identity", fill="forestgreen", alpha=0.5) +
geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour="orange", alpha=0.9, size=1.5) +
ggtitle("using confidence interval")
dev.off()
# Just to add space between the introduction of the document
knitr::asis_output(htmltools::htmlPreserve("<br><br>"))
library(tidyverse)
library(qqman)
library(readr)
library(DT)
library(ggrepel)
# Read data
data <- read_delim("0_DATA/GWAS_vitaminD_XiaEtAL.linear.light.gz", col_names=T, delim=" ")
#data=data[ sample(seq(1,nrow(data)), 100000) , ]
# Calculate a few sumstat?
nb_snp=nrow(data)
signif = data %>% filter(P<0.00000001) %>% arrange(CHR, BP)
nb_signif=nrow(signif)
manhattan(data[which(data$P<0.05) , ], chr = 'CHR', bp = 'BP', p='P', snp = 'SNP', suggestiveline = 5, genomewideline = 8, annotatePval=0.0000001, ylim=c(0,200))
datatable(signif, rownames = FALSE, options = list(pageLength = 5) )
manhattan(data[which(data$P<0.05) , ], chr = 'CHR', bp = 'BP', p='P', snp = 'SNP', suggestiveline = 5, genomewideline = 8, annotatePval=0.0000001, ylim=c(0,400))
data=read.table("0_DATA/smr_VitaminDXiaEtAl.smr", header=T)
data
data=read.table("0_DATA/smr_VitaminDXiaEtAl.smr", header=T)
datatable(data, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX = "(500px") )
data$probeID %>% length()
data$probeID %>% unique() %>% length()
data=read.table("0_DATA/smr_VitaminDXiaEtAl.smr", header=T)
data %>%
filter(p_SMR<0.000001)
data %>%
filter(p_SMR<0.000001)
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ILMN_2131381.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
SMREffectPlot(data=SMRData, trait_name="VitaminD")
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ILMN_2131381.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
# Read result
data=read_delim("0_DATA/GWAS_vitaminD_XiaEtAL.linear.light.gz", col_names=T, delim=" ")
data$CHR=as.factor(data$CHR)
# Read after clumping data
clump=read.table("0_DATA/result_GWAS_VitaminD_XiaEtAl_clumped", header=T)
# A list of all SNPs implicated in an association?
Hit_SNP <- c(
as.character(clump$SNP),
strsplit(as.character(clump$SP2), ',', fixed=TRUE) %>% unlist() %>% gsub("\\(.\\)", "", .)
)
Hit_SNP <- Hit_SNP[Hit_SNP != "NONE"]
# -------- Add cumulative position + clumping information to data
don <- data %>%
# Compute chromosome size and merge this info to the GWAS result
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
left_join(data, ., by=c("CHR"="CHR")) %>%
# keep only SNP with pvalue < 0.05: it makes the plot realisation way faster
filter( P<0.03 | SNP %in% sample(data$SNP, 150000)) %>%
# Add a cumulative position colummn to the data set
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot) %>%
# Add clumping information
mutate( is_major=ifelse(SNP %in% clump$SNP & P<0.0000000000000000000001, "yes", "no")) %>%
mutate( is_clump=ifelse(SNP %in% Hit_SNP, "yes", "no"))
# -------- prepare X axis
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
# -------- Make the plot
ggplot(don, aes(x=BPcum, y=-log10(P))) +
# Show all points
geom_point( aes(color=as.factor(CHR)), alpha=0.3, size=0.5) +
scale_color_manual(values = rep(c("grey", "pink"),44)) +
# Add highlighted points for significant association:
geom_point(data=subset(don, is_clump=="yes"), color="orange", size=0.2) +
geom_point(data=subset(don, is_major=="yes"), color="red", size=4) +
geom_label_repel( data=subset(don, is_major=="yes"), aes(label=SNP), size=2) +
# Make X axis:
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# -------- Add cumulative position + clumping information to data
don <- data %>%
# Compute chromosome size and merge this info to the GWAS result
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
left_join(data, ., by=c("CHR"="CHR")) %>%
# keep only SNP with pvalue < 0.05: it makes the plot realisation way faster
filter( P<0.03 | SNP %in% sample(data$SNP, 150000)) %>%
# Add a cumulative position colummn to the data set
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot) %>%
# Add clumping information
mutate( is_major=ifelse(SNP %in% clump$SNP & P<10e-8, "yes", "no")) %>%
mutate( is_clump=ifelse(SNP %in% Hit_SNP, "yes", "no"))
# -------- prepare X axis
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
# -------- Make the plot
ggplot(don, aes(x=BPcum, y=-log10(P))) +
# Show all points
geom_point( aes(color=as.factor(CHR)), alpha=0.3, size=0.5) +
scale_color_manual(values = rep(c("grey", "pink"),44)) +
# Add highlighted points for significant association:
geom_point(data=subset(don, is_clump=="yes"), color="orange", size=0.2) +
geom_point(data=subset(don, is_major=="yes"), color="red", size=4) +
geom_label_repel( data=subset(don, is_major=="yes"), aes(label=SNP), size=2) +
# Make X axis:
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# Create data
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
# Create data
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
# A reordered barplot that does not work:
data %>%
arrange(val) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# We will consider 2 data sets. Data has one value per group, mpg has several values per group.
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
mpg
# A reordered barplot that does not work:
data %>%
arrange(val) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# A reordered barplot that does not work:
data %>%
arrange(val) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# Library
library(forcats)
library(tidyverse)
# Reorder following the value of another column:
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# Reorder following the value of another column:
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# Reverse side
data %>%
mutate(name = fct_reorder(name, desc(val))) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# Reverse side
data %>%
mutate(name = fct_reorder(name, desc(val))) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# If you have several values per factor level? You can use whatever function:
mpg %>%
mutate(class = fct_reorder(class, hwy)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# If you have several values per factor level? You can use whatever function:
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=min)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=max)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# If you have several values per factor level? You can use whatever function:
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=max)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# If you have several values per factor level? You can use whatever function:
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=max)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=min)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=count)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=n)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length() )) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
summary(mpg)
mpg$class
mpg$class %>% table
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
#mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
#mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# Reorder following a precise order
data %>%
mutate(name = fct_relevel(name, "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# Reorder following a precise order
data %>%
mutate(name = fct_relevel(name, "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# Reorder following a precise order
data %>%
mutate(name = fct_relevel(name, "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
# ----- USING DPLYR
mpg %>%
group_by(manufacturer, model) %>%
summarize( av_displ = mean(displ)) %>%
arrange( manufacturer, av_displ) %>%
mutate( model=factor(model, model)) %>%
ggplot( aes(x=model, y=av_displ, fill=manufacturer)) +
geom_bar(stat="identity")
data
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name))
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name))
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_point() +
coord_flip()
