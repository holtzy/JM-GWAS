geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
}
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
show_connection(o1, o2)
library(dplyr)
library(ggplot2)
library(ggrepel)
show_connection(o1, o2)
library(tidyr)
library(ggplot2)
library(ggrepel)
show_connection(o1, o2)
data(geneticMap)
o1 <- map1 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
o2 <- map2 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
show_connection(o1, o2, showName=FALSE)
res <- LCIS(o1,o2)
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
library(tidyr)
library(ggplot2)
library(ggrepel)
show_connection(o1, o2)
res <- LCS(o1,o2)
res$LLCS
res$LCS
show_connection(o1, o2, tokeep=res$LCS)
data(geneticMap)
o1 <- map1 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
o2 <- map2 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
show_connection(o1, o2, showName=FALSE)
show_connection(o1, o2, showName=FALSE)
res <- LCIS(o1,o2)
show_connection(o1, o2, tokeep=res$LCIS, showName=FALSE)
show_connection <- function(o1, o2, tokeep=NA, showName=TRUE, highlight=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( !is.na(highlight) ){
don$mycolor <- ifelse( don$V1 %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor))
}
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
}
res <- LCIS(o1,o2)
show_connection(o1, o2, tokeep=res$LCIS, showName=FALSE)
show_connection(o1, o2, highlight=res$LCIS, showName=FALSE)
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
tokeep=NA
showName=TRUE
highlight=res$LCIS
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( !is.na(highlight) ){
don$mycolor <- ifelse( don$V1 %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor))
}
don$mycolor <- ifelse( don$V1 %in% highlight, "part of LCS", "excluded of LCS")
don$V1
don
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor))
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
showName=FALSE
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("grey", "red"))
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
p
don
p
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "grey"))
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
p
show_connection <- function(o1, o2, tokeep=NA, showName=FALSE, highlight=res$LCIS){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements if the tokeep option is activated:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( !is.na(highlight) ){
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "grey"))
}
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
}
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
library(tidyr)
library(ggplot2)
library(ggrepel)
show_connection(o1, o2)
show_connection <- function(o1, o2, tokeep=NA, showName=TRUE, highlight=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements if the tokeep option is activated:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( !is.na(highlight) ){
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "grey"))
}
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
}
library(tidyr)
library(ggplot2)
library(ggrepel)
show_connection(o1, o2)
show_connection(o1, o2, tokeep=res$LCS)
res <- LCS(o1,o2)
show_connection(o1, o2, tokeep=res$LCS)
show_connection(o1, o2, highlight =res$LCS)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
library(tidyverse)
library(ggrepel)
show_connection(o1, o2)
show_connection
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
show_connection(o1, o2)
show_connection
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
library(tidyverse)
library(ggrepel)
show_connection(o1, o2)
show_connection
res <- LCS(o1,o2)
res$LLCS
res$LCS
show_connection(o1, o2, tokeep=res$LCS)
show_connection(o1, o2, highlight =res$LCS)
show_connection(o1, o2, highlight =res$LCS)
show_connection(o1, o2, highlight =res$LCS)
tokeep=NA
showName=TRUE
highlight=res$LCS
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements if the tokeep option is activated:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( all(!is.na(highlight)) ){
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "black"))
}
all(!is.na(highlight))
is.na(highlight)
all(!is.na(highlight))
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "black"))
tokeep=NA
showName=TRUE
highlight=res$LCS
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements if the tokeep option is activated:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( all(!is.na(highlight)) ){
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "black"))
}
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
p
tokeep=NA
showName=TRUE
highlight=res$LCS
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# Keep only a sample of the elements if the tokeep option is activated:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name))
# If user want to highlight a few connection, I do:
if( all(!is.na(highlight)) ){
don$mycolor <- ifelse( don$name %in% highlight, "part of LCS", "excluded of LCS")
p <- ggplot( don, aes(x=ord, y=position, label=name, group=name, color=mycolor)) +
scale_color_manual(values=c("red", "black"))
}
p <- p +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_line() +
theme_void() +
theme(legend.position="none") +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# Add item names
if(showName==TRUE){
p <- p +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA))
}
library(LCSLCIS)
help(show_connection)
library(LCSLCIS)
help(show_connection)
library(LCSLCIS)
help(LCS)
help("show_connection")
# to access the Cex API:
customer_id="up113961565"
key="iAzeBViWLSfe4DkO2AqUmW32o"
secret="xCykHj9eJqTAdUOWbbvRCTDYAB0"
# A few libraries are needed
library(tidyverse)
library(digest)       # For the hmac function that allows to create the signature
library(RCurl)        # Pour récupérer les données en appelant des URLS
require(jsonlite)      # To go from JSON to data frame
library(tidyverse)
westra <- read.table("0_DATA/smr_VitaminDXiaEtAl_westra.smr", header=T)
westra <- read.table("0_DATA/smr_VitaminDXiaEtAl_westra.smr", header=T)
eqtlgen <- read.table("0_DATA/smr_VitaminDXiaEtAl_eQTLGEN.smr", header=T))
eqtlgen <- read.table("0_DATA/smr_VitaminDXiaEtAl_eQTLGEN.smr", header=T)
gtex <- read.table("0_DATA/smr_VitaminDXiaEtAl_GTEXLiver.smr", header=T)
nrow(westra)
thresh <- 0.05 / nrow(westra)
thresh
westra %>% filter(p_SMR<thresh) %>% nrow()
qtlgen %>% filter(p_SMR<thresh
qtlgen %>% filter(p_SMR<thresh)
eqtlgen %>% filter(p_SMR<thresh) %>% nrow()
gtex %>% filter(p_SMR<thresh) %>% nrow()
# A few library
library(tidyverse)
library(DT)
eqtlgen %>% filter(p_SMR < (0.05 / nrow(eqtlgen)) ) %>% nrow()
gtex %>% filter(p_SMR < (0.05 / nrow(gtex)) ) %>% nrow()
westra <- read.table("0_DATA/smr_VitaminDXiaEtAl_westra.smr", header=T)
eqtlgen <- read.table("0_DATA/smr_VitaminDXiaEtAl_eQTLGEN.smr", header=T)
gtex <- read.table("0_DATA/smr_VitaminDXiaEtAl_GTEXLiver.smr", header=T)
r westra %>% filter(p_SMR < (0.05 / nrow(westra)) ) %>% nrow()
westra %>% filter(p_SMR < (0.05 / nrow(westra)) ) %>% nrow()
eqtlgen %>% filter(p_SMR < (0.05 / nrow(eqtlgen)) ) %>% nrow()
gtex %>% filter(p_SMR < (0.05 / nrow(gtex)) ) %>% nrow()
westra %>% filter(p_SMR < (0.05 / nrow(westra)) )
eqtlgen %>% filter(p_SMR < (0.05 / nrow(eqtlgen)) )
gtex %>% filter(p_SMR < (0.05 / nrow(gtex)) )
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ILMN_2131381.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
SMREffectPlot(data=SMRData, trait_name="VitaminD")
datatable(data %>% filter(p_SMR<0.000001), rownames = FALSE, options = list(pageLength = 5, scrollX=T, dom='t') )
data %>% filter(p_SMR<0.000001)
# A few library
library(tidyverse)
library(DT)
westra <- read.table("0_DATA/smr_VitaminDXiaEtAl_westra.smr", header=T)
eqtlgen <- read.table("0_DATA/smr_VitaminDXiaEtAl_eQTLGEN.smr", header=T)
gtex <- read.table("0_DATA/smr_VitaminDXiaEtAl_GTEXLiver.smr", header=T)
westra %>% filter(p_SMR < (0.05 / nrow(westra)) )
eqtlgen %>% filter(p_SMR < (0.05 / nrow(eqtlgen)) )
gtex %>% filter(p_SMR < (0.05 / nrow(gtex)) )
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ILMN_2131381.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
SMREffectPlot(data=SMRData, trait_name="VitaminD")
datatable(data %>% filter(p_SMR<0.000001), rownames = FALSE, options = list(pageLength = 5, scrollX=T, dom='t') )
data
data
datatable(SMRData %>% filter(p_SMR<0.000001), rownames = FALSE, options = list(pageLength = 5, scrollX=T, dom='t') )
SMRData
datatable(westra %>% filter(p_SMR<0.000001), rownames = FALSE, options = list(pageLength = 5, scrollX=T, dom='t') )
datatable(westra, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
eqtlgen
eqtlgen %>% filter(p_SMR < (0.05 / nrow(eqtlgen)) )
westra
westra
westra %>% filter(p_SMR < (0.05 / nrow(westra)) )
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ENSG00000152270.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ENSG00000254682.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ENSG00000254682.1.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ENSG00000152268.8.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
# Make the plot
source("SCRIPT/plot_SMR.r")
# Read the data file in R:
SMRData = ReadSMRData("0_DATA/myplot.ENSG00000254682.1.txt")
# Plot the SMR results in a genomic region centred around a probe:
SMRLocusPlot(data=SMRData, smr_thresh=8.4e-6, heidi_thresh=0.05, plotWindow=1000, max_anno_probe=16)
setwd("/Users/y.holtz/Dropbox/QBI/4_UK_BIOBANK_GWAS_PROJECT/VitaminD-GWAS")
rmarkdown::render_site()
setwd("/Users/y.holtz/Dropbox/QBI/4_UK_BIOBANK_GWAS_PROJECT/VitaminD-GWAS")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("/Users/y.holtz/Dropbox/QBI/4_UK_BIOBANK_GWAS_PROJECT/VitaminD-GWAS")
rmarkdown::render_site()
